ARG NGINX_VERSION=1.23.2
ARG NGINX_RTMP_VERSION=1.2.2
ARG FFMPEG_VERSION=6.0

##############################
# Build the NGINX-build image.
FROM ubuntu:22.04 as build-nginx
ARG NGINX_VERSION
ARG NGINX_RTMP_VERSION
ARG MAKEFLAGS="-j4"

# Build dependencies.
RUN apt update && apt install -y --no-install-recommends\
  build-essential \
  cmake \
  ca-certificates \
  curl \
  gcc \
  libc-dev \
  make \
  musl-dev \
  openssl \
  libssl-dev \
  libpcre3 \
  libpcre3-dev \
  pkg-config \
  zlib1g-dev \
  wget && \
  rm -rf /var/lib/apt/lists/*

WORKDIR /tmp

# Get nginx source.
RUN wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
  tar zxf nginx-${NGINX_VERSION}.tar.gz && \
  rm nginx-${NGINX_VERSION}.tar.gz

# Get nginx-rtmp module.
RUN wget https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_VERSION}.tar.gz && \
  tar zxf v${NGINX_RTMP_VERSION}.tar.gz && \
  rm v${NGINX_RTMP_VERSION}.tar.gz

# Compile nginx with nginx-rtmp module.
WORKDIR /tmp/nginx-${NGINX_VERSION}
RUN \
  ./configure \
  --prefix=/usr/local/nginx \
  --add-module=/tmp/nginx-rtmp-module-${NGINX_RTMP_VERSION} \
  --conf-path=/etc/nginx/nginx.conf \
  --with-threads \
  --with-file-aio \
  --with-http_ssl_module \
  --with-debug \
  --with-http_stub_status_module \
  --with-cc-opt="-Wimplicit-fallthrough=0" && \
  make && \
  make install

###############################
# Build the FFmpeg-build image.
FROM nvidia/cuda:12.2.2-devel-ubuntu22.04 as build-ffmpeg

ENV DEBIAN_FRONTEND=noninteractive
ARG FFMPEG_VERSION
ARG PREFIX=/usr/local
ARG MAKEFLAGS="-j4"

# FFmpeg build dependencies.
RUN apt update && apt install -y --no-install-recommends \
  build-essential \
  coreutils \
  cmake \
  clang \
  libx264-dev \
  libx265-dev \
  libc6 \
  libc6-dev \
  libfreetype6-dev \
  libfdk-aac-dev \
  libmp3lame-dev \
  libogg-dev \
  libass9 \
  libass-dev \
  libnuma1 \
  libnuma-dev \
  libopus-dev \
  librtmp-dev \
  libvpx-dev \
  libwebp-dev \
  libtheora-dev \
  libtool \
  libssl-dev \
  libfdk-aac-dev \
  libaom-dev \
  libdav1d-dev \
  libunistring-dev \
  libass-dev \
  libfreetype6-dev \
  libgnutls28-dev \
  libmp3lame-dev \
  libsdl2-dev \
  libtool \
  libva-dev \
  libvdpau-dev \
  libvorbis-dev \
  libxcb1-dev \
  libxcb-shm0-dev \
  libxcb-xfixes0-dev \
  libffmpeg-nvenc-dev \
  zlib1g-dev \
  pkg-config \
  wget \
  yasm \
  git \
  ca-certificates && \
  rm -rf /var/lib/apt/lists/*

WORKDIR /tmp

RUN \
  git clone --depth=1 https://gitlab.com/AOMediaCodec/SVT-AV1.git && \
  cd SVT-AV1 && \
  sed -i 's/picture_copy(/svt_av1_picture_copy(/g' \
    Source/Lib/Common/Codec/EbPictureOperators.c \
    Source/Lib/Common/Codec/EbPictureOperators.h \
    Source/Lib/Encoder/Codec/EbFullLoop.c \
    Source/Lib/Encoder/Codec/EbProductCodingLoop.c && \
  cd Build && \
  cmake .. -G"Unix Makefiles" -DCMAKE_INSTALL_LIBDIR=lib -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release && \
  make -j$(nproc) install


# Clone and install ffnvcodec
RUN git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git && \
  cd nv-codec-headers && \
  git checkout origin/sdk/12.0 && \
  make && make install

# Get FFmpeg source.
RUN wget http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz && \
  tar zxf ffmpeg-${FFMPEG_VERSION}.tar.gz && \
  rm ffmpeg-${FFMPEG_VERSION}.tar.gz

# Get FFmpeg flv h265/av1 support.
RUN git clone --depth=1 https://github.com/runner365/ffmpeg_rtmp_h265 && \
  cp ./ffmpeg_rtmp_h265/flv.h /tmp/ffmpeg-${FFMPEG_VERSION}/libavformat/ && \
  cp ./ffmpeg_rtmp_h265/flvdec.c /tmp/ffmpeg-${FFMPEG_VERSION}/libavformat/ && \
  cp ./ffmpeg_rtmp_h265/flvenc.c /tmp/ffmpeg-${FFMPEG_VERSION}/libavformat/

# Compile ffmpeg.
WORKDIR /tmp/ffmpeg-${FFMPEG_VERSION}

RUN \
  sed -i 's/add_ldexeflags -fPIE -pie/add_ldexeflags -fPIE -static-pie/' configure && ./configure \
  --pkg-config-flags=--static \
  --prefix=${PREFIX} \
  --enable-version3 \
  --enable-gpl \
  --enable-nonfree \
  --enable-libfdk-aac \
  --enable-openssl \
  --enable-libnpp \
  --enable-cuda \
  --enable-ffnvcodec \
  --enable-cuda-llvm \
  --enable-libx264 \
  --enable-libx265 \
  --enable-libaom \
  --enable-libdav1d \
  --enable-libsvtav1 \
  --enable-libvpx \
  --enable-libopus \
  --enable-cuvid \
  --enable-cuda-nvcc \
  --enable-nvdec \
  --enable-nvenc \
  --enable-libnpp \
  --disable-debug \
  --disable-doc \
  --disable-ffplay \
  --extra-cflags=-I/usr/local/cuda/include \
  --extra-ldflags=-L/usr/local/cuda/lib64 \
  --extra-libs="-lpthread -lm" && \
  make && \
  make install && \
  make distclean
  
RUN ldd /usr/local/bin/ffmpeg | awk '{if (match($3, /^\//)) print $3}' | xargs -I '{}' cp -v '{}' /usr/local/lib/

# Cleanup.
RUN rm -rf /var/cache/* /tmp/*

##########################
# Build the release image.
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV NVIDIA_DRIVER_VERSION=535
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,video,utility

# Set default ports.
ENV HTTP_PORT 80
ENV HTTPS_PORT 443
ENV RTMP_PORT 1935

# Set default options.
ENV SINGLE_STREAM ""
ENV MAX_MUXING_QUEUE_SIZE ""
ENV ANALYZEDURATION ""

RUN apt update && apt install -y --no-install-recommends \
  ca-certificates \
  curl \
  gettext \
  libpcre3-dev \
  libnvidia-decode-${NVIDIA_DRIVER_VERSION} \
  libnvidia-encode-${NVIDIA_DRIVER_VERSION} \
  libtheora0 \
  openssl \
  rtmpdump
  
RUN apt install -y --no-install-recommends ffmpeg

RUN echo "**** Section cleanup ****" \
        && apt-get clean autoclean -y \
        && apt-get autoremove -y \
        && rm -rf \
            /var/lib/apt/lists/* \
            /var/tmp/* \
            /tmp/* 

COPY --from=build-nginx /usr/local/nginx /usr/local/nginx
COPY --from=build-nginx /etc/nginx /etc/nginx
COPY --from=build-ffmpeg /usr/local/bin /usr/local/bin
COPY --from=build-ffmpeg /usr/local/lib /usr/local/lib
COPY --from=build-ffmpeg /usr/lib/x86_64-linux-gnu/libfdk-aac.so.2 /usr/lib/x86_64-linux-gnu/libfdk-aac.so.2

ENV LD_LIBRARY_PATH "${LD_LIBRARY_PATH}:/usr/local/lib/"

# Add NGINX path, config and static files.
ENV PATH "${PATH}:/usr/local/nginx/sbin"
RUN mkdir -p /opt/data && mkdir /www
COPY nginx.conf /etc/nginx/nginx.conf
COPY static /www/static

RUN mkdir -p /var/log/nginx/ && \
	ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log

EXPOSE 1935
EXPOSE 80

CMD ["nginx"]
